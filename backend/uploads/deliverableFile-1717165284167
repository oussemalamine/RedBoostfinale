import React, { useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { loadEntrepreneurs } from '../../app/features/entrepreneursData/entrepreneursSlice'; // adjust the path

import {
  CContainer,
  CCard,
  CCardBody,
  CCardHeader,
} from '@coreui/react';
import AllContactsCtable from '../../components/contacts/AllContactsCtable';
import AdvancedFilter from './AdvancedFilter';

const AllContacts = () => {

  const [filters, setFilters] = useState({}); // State to store filters

  const dispatch = useDispatch(); // Use useDispatch hook
  useEffect(() => {
    dispatch(loadEntrepreneurs());
  }, [dispatch]);

  const entrepreneurs = useSelector((state) => state.entrepreneurs.entrepreneurs);

  const maleEntrepreneurs = entrepreneurs.filter(entrepreneur => entrepreneur.gender === 'homme');
  const femaleEntrepreneurs = entrepreneurs.filter(entrepreneur => entrepreneur.gender === 'femme');
  const numberOfMaleEntrepreneurs = maleEntrepreneurs.length;
  const numberOfFemaleEntrepreneurs = femaleEntrepreneurs.length;

// Function to calculate age from date of birth
function calculateAge(dateOfBirth) {
  const today = new Date();
  const birthDate = new Date(dateOfBirth);
  let age = today.getFullYear() - birthDate.getFullYear();
  const month = today.getMonth() - birthDate.getMonth();
  if (month < 0 || (month === 0 && today.getDate() < birthDate.getDate())) {
      age--;
  }
  return age;
}
// Calculate total age
const totalAge = entrepreneurs.reduce((acc, entrepreneur) => acc + calculateAge(entrepreneur.dateDeNaissance), 0);
// Calculate average age
const averageAge = totalAge / entrepreneurs.length;

// Calculate number of entrepreneurs per sector of activity
const entrepreneursPerSector = {};
entrepreneurs.forEach(entrepreneur => {
    const sector = entrepreneur.secteurActivites;
    entrepreneursPerSector[sector] = (entrepreneursPerSector[sector] || 0) + 1;
});

// Sort sectors by number of entrepreneurs
const sortedSectors = Object.keys(entrepreneursPerSector).sort((a, b) => entrepreneursPerSector[b] - entrepreneursPerSector[a]);

// Calculate number of entrepreneurs per region
const entrepreneursPerRegion = {};
entrepreneurs.forEach(entrepreneur => {
    const region = entrepreneur.region;
    entrepreneursPerRegion[region] = (entrepreneursPerRegion[region] || 0) + 1;
});

// Sort regions by number of entrepreneurs
const sortedRegions = Object.keys(entrepreneursPerRegion).sort((a, b) => entrepreneursPerRegion[b] - entrepreneursPerRegion[a]);

// Calculate number of female co-founders
const numberOfFemaleCoFounders = entrepreneurs.filter(entrepreneur => entrepreneur.gender === 'femme').length;

  console.log(`Number of Female Co-Founders: ${numberOfFemaleCoFounders}`);
  console.log(`Average Age: ${averageAge}`);
  console.log(`Number of male entrepreneurs: ${numberOfMaleEntrepreneurs}`);
  console.log(`Number of female entrepreneurs: ${numberOfFemaleEntrepreneurs}`);
  console.log("Number of Entrepreneurs per Sector of Activity:");
  console.log(entrepreneursPerSector);

  console.log("Top Sectors:");
  console.log(sortedSectors.slice(0, 5)); // Display top 5 sectors

  console.log("Number of Entrepreneurs per Region:");
  console.log(entrepreneursPerRegion);

  console.log("Top Regions:");
  console.log(sortedRegions.slice(0, 5)); // Display top 5 regions

  // Function to handle filter updates
  const handleFilterUpdate = (newFilters) => {
    setFilters(newFilters);
  };

  // Function to filter entrepreneurs based on filters
  const getFilteredEntrepreneurs = () => {
    return entrepreneurs.filter((entrepreneur) => {
      const age = entrepreneur.age;
      return (
        (!filters.sector || entrepreneur.secteurActivites === filters.sector) &&
        (!filters.gender || entrepreneur.gender === filters.gender) &&
        (!filters.region || entrepreneur.region === filters.region) &&
        (!filters.ageMin || age >= parseInt(filters.ageMin)) &&
        (!filters.ageMax || age <= parseInt(filters.ageMax)) &&
        (!filters.gouvernorat || entrepreneur.gouvernorat === filters.gouvernorat) &&
        (!filters.nom || entrepreneur.nom.toLowerCase().includes(filters.nom.toLowerCase())) &&
        (!filters.prenom || entrepreneur.prenom.toLowerCase().includes(filters.prenom.toLowerCase()))
        // Add more filter conditions as needed
      );
    });
  };

  const filteredEntrepreneurs = getFilteredEntrepreneurs();

  return (
    <CContainer className="my-4">
      <AdvancedFilter entrepreneurs={entrepreneurs} onFilterUpdate={handleFilterUpdate} />
      <CCard className='mt-4'>
        <CCardHeader className="bg-dark text-light">All Contacts</CCardHeader>
        <CCardBody>
          {entrepreneurs.length === 0 ? (
            <div>Loading entrepreneurs...</div>
          ) : (
            <AllContactsCtable entrepreneurs={filteredEntrepreneurs} />
          )}
        </CCardBody>
      </CCard>
    </CContainer>
  );
};

export default AllContacts;
